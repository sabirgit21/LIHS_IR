package model.ERP.EO;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Nov 07 12:32:20 PKT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblDonSetupImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        Dated,
        ProjectId,
        Name,
        FatName,
        JobTitle,
        JobCo,
        CoAddress,
        HomeAddress,
        Mobile,
        Tel,
        Email,
        DonRef,
        Narration,
        CreatedDate,
        CreatedBy,
        UpdatedDate,
        UpdatedBy,
        MonthlyComit,
        DonorType,
        DonCat,
        GlL4Id,
        TblDonCr,
        TblDonKindM;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int DATED = AttributesEnum.Dated.index();
    public static final int PROJECTID = AttributesEnum.ProjectId.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int FATNAME = AttributesEnum.FatName.index();
    public static final int JOBTITLE = AttributesEnum.JobTitle.index();
    public static final int JOBCO = AttributesEnum.JobCo.index();
    public static final int COADDRESS = AttributesEnum.CoAddress.index();
    public static final int HOMEADDRESS = AttributesEnum.HomeAddress.index();
    public static final int MOBILE = AttributesEnum.Mobile.index();
    public static final int TEL = AttributesEnum.Tel.index();
    public static final int EMAIL = AttributesEnum.Email.index();
    public static final int DONREF = AttributesEnum.DonRef.index();
    public static final int NARRATION = AttributesEnum.Narration.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int MONTHLYCOMIT = AttributesEnum.MonthlyComit.index();
    public static final int DONORTYPE = AttributesEnum.DonorType.index();
    public static final int DONCAT = AttributesEnum.DonCat.index();
    public static final int GLL4ID = AttributesEnum.GlL4Id.index();
    public static final int TBLDONCR = AttributesEnum.TblDonCr.index();
    public static final int TBLDONKINDM = AttributesEnum.TblDonKindM.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblDonSetupImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.ERP.EO.TblDonSetup");
    }


    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public BigDecimal getId() {
        return (BigDecimal) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for Dated, using the alias name Dated.
     * @return the value of Dated
     */
    public Timestamp getDated() {
        return (Timestamp) getAttributeInternal(DATED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Dated.
     * @param value value to set the Dated
     */
    public void setDated(Timestamp value) {
        setAttributeInternal(DATED, value);
    }

    /**
     * Gets the attribute value for ProjectId, using the alias name ProjectId.
     * @return the value of ProjectId
     */
    public BigDecimal getProjectId() {
        return (BigDecimal) getAttributeInternal(PROJECTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProjectId.
     * @param value value to set the ProjectId
     */
    public void setProjectId(BigDecimal value) {
        setAttributeInternal(PROJECTID, value);
    }

    /**
     * Gets the attribute value for Name, using the alias name Name.
     * @return the value of Name
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Name.
     * @param value value to set the Name
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for FatName, using the alias name FatName.
     * @return the value of FatName
     */
    public String getFatName() {
        return (String) getAttributeInternal(FATNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for FatName.
     * @param value value to set the FatName
     */
    public void setFatName(String value) {
        setAttributeInternal(FATNAME, value);
    }

    /**
     * Gets the attribute value for JobTitle, using the alias name JobTitle.
     * @return the value of JobTitle
     */
    public String getJobTitle() {
        return (String) getAttributeInternal(JOBTITLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for JobTitle.
     * @param value value to set the JobTitle
     */
    public void setJobTitle(String value) {
        setAttributeInternal(JOBTITLE, value);
    }

    /**
     * Gets the attribute value for JobCo, using the alias name JobCo.
     * @return the value of JobCo
     */
    public String getJobCo() {
        return (String) getAttributeInternal(JOBCO);
    }

    /**
     * Sets <code>value</code> as the attribute value for JobCo.
     * @param value value to set the JobCo
     */
    public void setJobCo(String value) {
        setAttributeInternal(JOBCO, value);
    }

    /**
     * Gets the attribute value for CoAddress, using the alias name CoAddress.
     * @return the value of CoAddress
     */
    public String getCoAddress() {
        return (String) getAttributeInternal(COADDRESS);
    }

    /**
     * Sets <code>value</code> as the attribute value for CoAddress.
     * @param value value to set the CoAddress
     */
    public void setCoAddress(String value) {
        setAttributeInternal(COADDRESS, value);
    }

    /**
     * Gets the attribute value for HomeAddress, using the alias name HomeAddress.
     * @return the value of HomeAddress
     */
    public String getHomeAddress() {
        return (String) getAttributeInternal(HOMEADDRESS);
    }

    /**
     * Sets <code>value</code> as the attribute value for HomeAddress.
     * @param value value to set the HomeAddress
     */
    public void setHomeAddress(String value) {
        setAttributeInternal(HOMEADDRESS, value);
    }

    /**
     * Gets the attribute value for Mobile, using the alias name Mobile.
     * @return the value of Mobile
     */
    public String getMobile() {
        return (String) getAttributeInternal(MOBILE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Mobile.
     * @param value value to set the Mobile
     */
    public void setMobile(String value) {
        setAttributeInternal(MOBILE, value);
    }

    /**
     * Gets the attribute value for Tel, using the alias name Tel.
     * @return the value of Tel
     */
    public String getTel() {
        return (String) getAttributeInternal(TEL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Tel.
     * @param value value to set the Tel
     */
    public void setTel(String value) {
        setAttributeInternal(TEL, value);
    }

    /**
     * Gets the attribute value for Email, using the alias name Email.
     * @return the value of Email
     */
    public String getEmail() {
        return (String) getAttributeInternal(EMAIL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Email.
     * @param value value to set the Email
     */
    public void setEmail(String value) {
        setAttributeInternal(EMAIL, value);
    }

    /**
     * Gets the attribute value for DonRef, using the alias name DonRef.
     * @return the value of DonRef
     */
    public String getDonRef() {
        return (String) getAttributeInternal(DONREF);
    }

    /**
     * Sets <code>value</code> as the attribute value for DonRef.
     * @param value value to set the DonRef
     */
    public void setDonRef(String value) {
        setAttributeInternal(DONREF, value);
    }

    /**
     * Gets the attribute value for Narration, using the alias name Narration.
     * @return the value of Narration
     */
    public String getNarration() {
        return (String) getAttributeInternal(NARRATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Narration.
     * @param value value to set the Narration
     */
    public void setNarration(String value) {
        setAttributeInternal(NARRATION, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for MonthlyComit, using the alias name MonthlyComit.
     * @return the value of MonthlyComit
     */
    public BigDecimal getMonthlyComit() {
        return (BigDecimal) getAttributeInternal(MONTHLYCOMIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for MonthlyComit.
     * @param value value to set the MonthlyComit
     */
    public void setMonthlyComit(BigDecimal value) {
        setAttributeInternal(MONTHLYCOMIT, value);
    }

    /**
     * Gets the attribute value for DonorType, using the alias name DonorType.
     * @return the value of DonorType
     */
    public String getDonorType() {
        return (String) getAttributeInternal(DONORTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DonorType.
     * @param value value to set the DonorType
     */
    public void setDonorType(String value) {
        setAttributeInternal(DONORTYPE, value);
    }

    /**
     * Gets the attribute value for DonCat, using the alias name DonCat.
     * @return the value of DonCat
     */
    public String getDonCat() {
        return (String) getAttributeInternal(DONCAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DonCat.
     * @param value value to set the DonCat
     */
    public void setDonCat(String value) {
        setAttributeInternal(DONCAT, value);
    }

    /**
     * Gets the attribute value for GlL4Id, using the alias name GlL4Id.
     * @return the value of GlL4Id
     */
    public BigDecimal getGlL4Id() {
        return (BigDecimal) getAttributeInternal(GLL4ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for GlL4Id.
     * @param value value to set the GlL4Id
     */
    public void setGlL4Id(BigDecimal value) {
        setAttributeInternal(GLL4ID, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTblDonCr() {
        return (RowIterator) getAttributeInternal(TBLDONCR);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTblDonKindM() {
        return (RowIterator) getAttributeInternal(TBLDONKINDM);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal id) {
        return new Key(new Object[] { id });
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number loginId = null;
                        try {
                            loginId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessUMID"));
                        } catch(Exception ex) {
                            ex.printStackTrace();
                        }
                        
                        if (operation == DML_INSERT) {
                            setCreatedBy(loginId);
                            setUpdatedBy(loginId);
                            } else if(operation == DML_UPDATE) {
                            setUpdatedBy(loginId);
                        }
        super.doDML(operation, e);
    }
}

