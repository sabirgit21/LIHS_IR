package model.ERP.EO;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Nov 07 11:57:05 PKT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TblBankCashImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        Name,
        BranchCode,
        Iban,
        AccountNo,
        AccountTitle,
        BankName,
        BranchAddr,
        ContPerson,
        Desig,
        Type,
        CreatedDate,
        CreatedBy,
        UpdatedDate,
        UpdatedBy;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int BRANCHCODE = AttributesEnum.BranchCode.index();
    public static final int IBAN = AttributesEnum.Iban.index();
    public static final int ACCOUNTNO = AttributesEnum.AccountNo.index();
    public static final int ACCOUNTTITLE = AttributesEnum.AccountTitle.index();
    public static final int BANKNAME = AttributesEnum.BankName.index();
    public static final int BRANCHADDR = AttributesEnum.BranchAddr.index();
    public static final int CONTPERSON = AttributesEnum.ContPerson.index();
    public static final int DESIG = AttributesEnum.Desig.index();
    public static final int TYPE = AttributesEnum.Type.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TblBankCashImpl() {
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public BigDecimal getId() {
        return (BigDecimal) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for Name, using the alias name Name.
     * @return the value of Name
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Name.
     * @param value value to set the Name
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for BranchCode, using the alias name BranchCode.
     * @return the value of BranchCode
     */
    public String getBranchCode() {
        return (String) getAttributeInternal(BRANCHCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for BranchCode.
     * @param value value to set the BranchCode
     */
    public void setBranchCode(String value) {
        setAttributeInternal(BRANCHCODE, value);
    }

    /**
     * Gets the attribute value for Iban, using the alias name Iban.
     * @return the value of Iban
     */
    public String getIban() {
        return (String) getAttributeInternal(IBAN);
    }

    /**
     * Sets <code>value</code> as the attribute value for Iban.
     * @param value value to set the Iban
     */
    public void setIban(String value) {
        setAttributeInternal(IBAN, value);
    }

    /**
     * Gets the attribute value for AccountNo, using the alias name AccountNo.
     * @return the value of AccountNo
     */
    public String getAccountNo() {
        return (String) getAttributeInternal(ACCOUNTNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccountNo.
     * @param value value to set the AccountNo
     */
    public void setAccountNo(String value) {
        setAttributeInternal(ACCOUNTNO, value);
    }

    /**
     * Gets the attribute value for AccountTitle, using the alias name AccountTitle.
     * @return the value of AccountTitle
     */
    public String getAccountTitle() {
        return (String) getAttributeInternal(ACCOUNTTITLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccountTitle.
     * @param value value to set the AccountTitle
     */
    public void setAccountTitle(String value) {
        setAttributeInternal(ACCOUNTTITLE, value);
    }

    /**
     * Gets the attribute value for BankName, using the alias name BankName.
     * @return the value of BankName
     */
    public String getBankName() {
        return (String) getAttributeInternal(BANKNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for BankName.
     * @param value value to set the BankName
     */
    public void setBankName(String value) {
        setAttributeInternal(BANKNAME, value);
    }

    /**
     * Gets the attribute value for BranchAddr, using the alias name BranchAddr.
     * @return the value of BranchAddr
     */
    public String getBranchAddr() {
        return (String) getAttributeInternal(BRANCHADDR);
    }

    /**
     * Sets <code>value</code> as the attribute value for BranchAddr.
     * @param value value to set the BranchAddr
     */
    public void setBranchAddr(String value) {
        setAttributeInternal(BRANCHADDR, value);
    }

    /**
     * Gets the attribute value for ContPerson, using the alias name ContPerson.
     * @return the value of ContPerson
     */
    public String getContPerson() {
        return (String) getAttributeInternal(CONTPERSON);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContPerson.
     * @param value value to set the ContPerson
     */
    public void setContPerson(String value) {
        setAttributeInternal(CONTPERSON, value);
    }

    /**
     * Gets the attribute value for Desig, using the alias name Desig.
     * @return the value of Desig
     */
    public String getDesig() {
        return (String) getAttributeInternal(DESIG);
    }

    /**
     * Sets <code>value</code> as the attribute value for Desig.
     * @param value value to set the Desig
     */
    public void setDesig(String value) {
        setAttributeInternal(DESIG, value);
    }

    /**
     * Gets the attribute value for Type, using the alias name Type.
     * @return the value of Type
     */
    public String getType() {
        return (String) getAttributeInternal(TYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Type.
     * @param value value to set the Type
     */
    public void setType(String value) {
        setAttributeInternal(TYPE, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public Number getCreatedBy() {
        return (Number) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public Number getUpdatedBy() {
        return (Number) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(Number value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal id) {
        return new Key(new Object[] { id });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.ERP.EO.TblBankCash");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Number loginId = null;
                        try {
                            loginId = new Number((String) ADFContext.getCurrent().getSessionScope().get("sessUMID"));
                        } catch(Exception ex) {
                            ex.printStackTrace();
                        }
                        
                        if (operation == DML_INSERT) {
                            setCreatedBy(loginId);
                            setUpdatedBy(loginId);
                            } else if(operation == DML_UPDATE) {
                            setUpdatedBy(loginId);
                        }
        super.doDML(operation, e);
    }
}

